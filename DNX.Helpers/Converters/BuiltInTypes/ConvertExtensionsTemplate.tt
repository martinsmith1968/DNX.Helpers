<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\MultipleOutputHelper.ttinclude" #>
<# // http://mariusbancila.ro/blog/2012/09/03/t4-lessons-learned/ #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
var types = new Dictionary<string, string>()
{
    { "Bool", "bool" },

    { "Byte", "byte" },
    { "SByte", "sbyte" },

    { "DateTime", "DateTime" },

    { "Int16", "short" },
    { "UInt16", "ushort" },
    { "Short", "short" },
    { "UShort", "ushort" },

    { "Int32", "int" },
    { "UInt32", "uint" },
    { "Int", "int" },
    { "UInt", "uint" },

    { "Int64", "long" },
    { "UInt64", "ulong" },
    { "Long", "long" },
    { "ULong", "ulong" },

    { "Float", "float" },
    { "Single", "float" },
    { "Double", "double" },
    { "Decimal", "decimal" },
}; #>
<# manager.StartHeader(); #>
// Code generated by a Template
using System;
using DNX.Helpers.Exceptions;

namespace DNX.Helpers.Converters.BuiltInTypes
{
<# manager.EndBlock(); #>
<#
foreach (var kvp in types)
{
    var typeName = kvp.Value;
    var typeDesc = kvp.Key;
    var fileName = string.Format("Convert{0}Extensions.generated.cs", typeDesc);

    manager.StartNewFile(fileName);
#>
    /// <summary>
    /// Class Convert<#= typeDesc #>Extensions.
    /// </summary>
    public static class Convert<#= typeDesc #>Extensions
    {
        /// <summary>
        /// Converts the string to a <#= typeName #>
        /// </summary>
        /// <param name="text">The text.</param>
        /// <returns><#= typeName #></returns>
        /// <exception cref="ConversionException">Unable to convert value to Type</exception>
        /// <remarks>Also available as an extension method</remarks>
        public static <#= typeName #> To<#= typeDesc #>(this string text)
        {
            <#= typeName #> result;

            if (!<#= typeName #>.TryParse(text, out result))
            {
                throw new ConversionException(text, "Unable to convert value to Type", typeof(<#= typeName #>));
            }

            return result;
        }

        /// <summary>
        /// Converts the string to a <#= typeName #>, or returns the default value if the conversion fails
        /// </summary>
        /// <param name="text">The text.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns><#= typeName #></returns>
        /// <remarks>Also available as an extension method</remarks>
        public static <#= typeName #> To<#= typeDesc #>(this string text, <#= typeName #> defaultValue)
        {
            try
            {
                var result = text.To<#= typeDesc #>();

                return result;
            }
            catch (ConversionException)
            {
                return defaultValue;
            }
        }

        /// <summary>
        /// Determines if the string can be converted to a <#= typeName #> or not
        /// </summary>
        /// <param name="text">The text.</param>
        /// <returns><c>true</c> if the specified text is a <#= typeName #>; otherwise, <c>false</c>.</returns>
        /// <remarks>Also available as an extension method</remarks>
        public static bool Is<#= typeDesc #>(this string text)
        {
            try
            {
                text.To<#= typeDesc #>();

                return true;
            }
            catch (ConversionException)
            {
                return false;
            }
        }
    }
<#	manager.EndBlock();
} #>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
