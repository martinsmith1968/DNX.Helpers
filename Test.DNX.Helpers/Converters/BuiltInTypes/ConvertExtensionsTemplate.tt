<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\MultipleOutputHelper.ttinclude" #>
<# // http://mariusbancila.ro/blog/2012/09/03/t4-lessons-learned/ #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
var types = new Dictionary<string, string>()
{
    { "Bool", "bool" },

    { "Byte", "byte" },
    { "SByte", "sbyte" },

    { "DateTime", "DateTime" },

    { "Int16", "short" },
    { "UInt16", "ushort" },
    { "Short", "short" },
    { "UShort", "ushort" },

    { "Int32", "int" },
    { "UInt32", "uint" },
    { "Int", "int" },
    { "UInt", "uint" },

    { "Int64", "long" },
    { "UInt64", "ulong" },
    { "Long", "long" },
    { "ULong", "ulong" },

    { "Float", "float" },
    { "Single", "float" },
    { "Double", "double" },
    { "Decimal", "decimal" }
}; #>
<# manager.StartHeader(); #>
// Code generated by a Template
using System;
using DNX.Helpers.Converters.BuiltInTypes;
using DNX.Helpers.Exceptions;
using NUnit.Framework;
using Test.DNX.Helpers.Converters.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Converters.BuiltInTypes
{
<# manager.EndBlock(); #>
<#
foreach (var kvp in types)
{
    var typeName = kvp.Value;
    var typeDesc = kvp.Key;
    var fileName = string.Format("Convert{0}ExtensionsTests.generated.cs", typeDesc);

    manager.StartNewFile(fileName);
#>
    [TestFixture]
    public class Convert<#= typeDesc #>ExtensionsTests
    {
        [TestCaseSource(typeof(Convert<#= typeDesc #>ExtensionsTestsSource), "Is<#= typeDesc #>")]
        public bool Test_Is<#= typeDesc #>(string text)
        {
            var result = text.Is<#= typeDesc #>();

            return result;
        }

        [TestCaseSource(typeof(Convert<#= typeDesc #>ExtensionsTestsSource), "To<#= typeDesc #>")]
        public <#= typeName #> Test_To<#= typeDesc #>(string text)
        {
            var result = text.To<#= typeDesc #>();

            return result;
        }

        [TestCaseSource(typeof(Convert<#= typeDesc #>ExtensionsTestsSource), "To<#= typeDesc #>Throws")]
        public bool Test_To<#= typeDesc #>_Throws(string text)
        {
            try
            {
                text.To<#= typeDesc #>();
            }
            catch (ConversionException ex)
            {
                Assert.AreEqual(text, ex.Value);

                return false;
            }

            return true;
        }

        [TestCaseSource(typeof(Convert<#= typeDesc #>ExtensionsTestsSource), "To<#= typeDesc #>WithDefault")]
        public <#= typeName #> Test_To<#= typeDesc #>_with_default(string text, <#= typeName #> defaultValue)
        {
            var result = text.To<#= typeDesc #>(defaultValue);

            return result;
        }
    }
<#	manager.EndBlock();
} #>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
