// Code generated by a Template
using System;
using DNX.Helpers.Maths;
using DNX.Helpers.Maths.BuiltInTypes;
using NUnit.Framework;
using Test.DNX.Helpers.Maths.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Maths.BuiltInTypes
{
    [TestFixture]
    public class MathsDecimalExtensionsTests
    {
        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "IsBetween_Default")]
        public bool IsBetween_Default(decimal value, decimal min, decimal max)
        {
            return value.IsBetween(min, max);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "IsBetween_BoundsType")]
        public bool IsBetween_BoundsType(decimal value, decimal min, decimal max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "IsBetweenEither_Default")]
        public bool IsBetweenEither_Default(decimal value, decimal min, decimal max)
        {
            return value.IsBetweenEither(min, max);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "IsBetweenEither_BoundsType")]
        public bool IsBetweenEither_BoundsType(decimal value, decimal min, decimal max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetweenEither(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "IsBetween")]
        public bool IsBetween(decimal value, decimal min, decimal max, bool allowEitherOrder, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, allowEitherOrder, boundsType);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "GetLowerBound")]
        public decimal GetLowerBound(decimal min, decimal max, bool allowEitherOrder)
        {
            return MathsDecimalExtensions.GetLowerBound(min, max, allowEitherOrder);
        }

        [TestCaseSource(typeof(MathsDecimalExtensionsTestsSource), "GetUpperBound")]
        public decimal GetUpperBound(decimal min, decimal max, bool allowEitherOrder)
        {
            return MathsDecimalExtensions.GetUpperBound(min, max, allowEitherOrder);
        }
            }
}
