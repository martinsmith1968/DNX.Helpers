// Code generated by a Template
using System;
using DNX.Helpers.Maths;
using DNX.Helpers.Maths.BuiltInTypes;
using NUnit.Framework;
using Test.DNX.Helpers.Maths.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Maths.BuiltInTypes
{
    [TestFixture]
    public class MathsDoubleExtensionsTests
    {
        [TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "IsBetween_Default")]
        public bool IsBetween_Default(double value, double min, double max)
        {
            return value.IsBetween(min, max);
        }

        [TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "IsBetween_BoundsType")]
        public bool IsBetween_BoundsType(double value, double min, double max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "IsBetweenEither_Default")]
        public bool IsBetweenEither_Default(double value, double min, double max)
        {
            return value.IsBetweenEither(min, max);
        }

        [TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "IsBetweenEither_BoundsType")]
        public bool IsBetweenEither_BoundsType(double value, double min, double max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetweenEither(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "IsBetween")]
        public bool IsBetween(double value, double min, double max, bool allowEitherOrder, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, allowEitherOrder, boundsType);
        }

		[TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "GetLowerBound")]
		public double GetLowerBound(double min, double max, bool allowEitherOrder)
		{
			return MathsDoubleExtensions.GetLowerBound(min, max, allowEitherOrder);
		}

		[TestCaseSource(typeof(MathsDoubleExtensionsTestsSource), "GetUpperBound")]
		public double GetUpperBound(double min, double max, bool allowEitherOrder)
		{
			return MathsDoubleExtensions.GetUpperBound(min, max, allowEitherOrder);
		}
    }
}
