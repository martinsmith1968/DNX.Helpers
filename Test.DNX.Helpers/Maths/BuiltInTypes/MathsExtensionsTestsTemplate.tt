<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\MultipleOutputHelper.ttinclude" #>
<# // http://mariusbancila.ro/blog/2012/09/03/t4-lessons-learned/ #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
var types = new Dictionary<string, string>()
{
    { "Byte", "byte" },
    { "SByte", "sbyte" },

    { "DateTime", "DateTime" },

    { "Int16", "short" },
    { "UInt16", "ushort" },

    { "Int32", "int" },
    { "UInt32", "uint" },

    { "Int64", "long" },
    { "UInt64", "ulong" },

    { "Float", "float" },
    { "Double", "double" },
    { "Decimal", "decimal" },
}; #>
<# manager.StartHeader(); #>
// Code generated by a Template
using System;
using DNX.Helpers.Maths;
using DNX.Helpers.Maths.BuiltInTypes;
using NUnit.Framework;
using Test.DNX.Helpers.Maths.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Maths.BuiltInTypes
{
<# manager.EndBlock(); #>
<#
foreach (var kvp in types)
{
    var typeName = kvp.Value;
    var typeDesc = kvp.Key;
    var fileName = string.Format("Maths{0}ExtensionsTests.generated.cs", typeDesc);

    manager.StartNewFile(fileName);
#>
    [TestFixture]
    public class Maths<#= typeDesc #>ExtensionsTests
    {
        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "IsBetween_Default")]
        public bool IsBetween_Default(<#= typeName #> value, <#= typeName #> min, <#= typeName #> max)
        {
            return value.IsBetween(min, max);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "IsBetween_BoundsType")]
        public bool IsBetween_BoundsType(<#= typeName #> value, <#= typeName #> min, <#= typeName #> max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, boundsType);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "IsBetweenEither_Default")]
        public bool IsBetweenEither_Default(<#= typeName #> value, <#= typeName #> min, <#= typeName #> max)
        {
            return value.IsBetweenEither(min, max);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "IsBetweenEither_BoundsType")]
        public bool IsBetweenEither_BoundsType(<#= typeName #> value, <#= typeName #> min, <#= typeName #> max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetweenEither(min, max, boundsType);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "IsBetween")]
        public bool IsBetween(<#= typeName #> value, <#= typeName #> min, <#= typeName #> max, bool allowEitherOrder, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, allowEitherOrder, boundsType);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "GetLowerBound")]
        public <#= typeName #> GetLowerBound(<#= typeName #> min, <#= typeName #> max, bool allowEitherOrder)
        {
            return Maths<#= typeDesc #>Extensions.GetLowerBound(min, max, allowEitherOrder);
        }

        [TestCaseSource(typeof(Maths<#= typeDesc #>ExtensionsTestsSource), "GetUpperBound")]
        public <#= typeName #> GetUpperBound(<#= typeName #> min, <#= typeName #> max, bool allowEitherOrder)
        {
            return Maths<#= typeDesc #>Extensions.GetUpperBound(min, max, allowEitherOrder);
        }
    }
<#	manager.EndBlock();
} #>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
