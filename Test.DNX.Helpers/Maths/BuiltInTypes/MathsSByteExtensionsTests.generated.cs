// Code generated by a Template
using System;
using DNX.Helpers.Maths;
using DNX.Helpers.Maths.BuiltInTypes;
using NUnit.Framework;
using Test.DNX.Helpers.Maths.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Maths.BuiltInTypes
{
    [TestFixture]
    public class MathsSByteExtensionsTests
    {
        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "IsBetween_Default")]
        public bool IsBetween_Default(sbyte value, sbyte min, sbyte max)
        {
            return value.IsBetween(min, max);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "IsBetween_BoundsType")]
        public bool IsBetween_BoundsType(sbyte value, sbyte min, sbyte max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "IsBetweenEither_Default")]
        public bool IsBetweenEither_Default(sbyte value, sbyte min, sbyte max)
        {
            return value.IsBetweenEither(min, max);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "IsBetweenEither_BoundsType")]
        public bool IsBetweenEither_BoundsType(sbyte value, sbyte min, sbyte max, IsBetweenBoundsType boundsType)
        {
            return value.IsBetweenEither(min, max, boundsType);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "IsBetween")]
        public bool IsBetween(sbyte value, sbyte min, sbyte max, bool allowEitherOrder, IsBetweenBoundsType boundsType)
        {
            return value.IsBetween(min, max, allowEitherOrder, boundsType);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "GetLowerBound")]
        public sbyte GetLowerBound(sbyte min, sbyte max, bool allowEitherOrder)
        {
            return MathsSByteExtensions.GetLowerBound(min, max, allowEitherOrder);
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "GetUpperBound")]
        public sbyte GetUpperBound(sbyte min, sbyte max, bool allowEitherOrder)
        {
            return MathsSByteExtensions.GetUpperBound(min, max, allowEitherOrder);
        }
        
        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "ValueToHexString")]
        public string Test_ValueToHexString(sbyte value)
        {
            return value.ToHexString();
        }

        [TestCaseSource(typeof(MathsSByteExtensionsTestsSource), "ValuesToHexString")]
        public string Test_ValuesToHexString(sbyte[] values)
        {
            return values.ToHexString();
        }
    }
}
