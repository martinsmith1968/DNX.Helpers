// Code generated by a Template
using System;
using DNX.Helpers.Maths;
using DNX.Helpers.Validation.BuiltInTypes;
using NUnit.Framework;
using Should;
using Test.DNX.Helpers.Validation.BuiltInTypes.TestsDataSource;

namespace Test.DNX.Helpers.Validation.BuiltInTypes
{
    [TestFixture]
    public class GuardUInt64Tests
    {
		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsBetween_Default")]
		public bool Guard_IsBetween_Default(ulong value, ulong min, ulong max, string messageText)
		{
			try
			{
				// Act
				Guard.IsBetween(() => value, min, max);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

        [TestCaseSource(typeof(GuardUInt64TestsSource), "IsBetween_BoundsType")]
        public bool Guard_IsBetween_BoundsType(ulong value, ulong min, ulong max, IsBetweenBoundsType boundsType, string messageText)
        {
			try
			{
				// Act
				Guard.IsBetween(() => value, min, max, boundsType);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
        }

        [TestCaseSource(typeof(GuardUInt64TestsSource), "IsBetween")]
        public bool Guard_IsBetween(ulong value, ulong min, ulong max, bool allowEitherOrder, IsBetweenBoundsType boundsType, string messageText)
        {
			try
			{
				// Act
				Guard.IsBetween(() => value, min, max, allowEitherOrder, boundsType);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
        }

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsGreaterThan")]
		public bool Guard_IsGreaterThan_Expr(ulong value, ulong min, string messageText)
		{
			try
			{
				// Act
				Guard.IsGreaterThan(() => value, min);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsGreaterThan")]
		public bool Guard_IsGreaterThan_Value(ulong actualValue, ulong min, string messageText)
		{
			try
			{
				// Act
				ulong value = min;
				Guard.IsGreaterThan(() => value, actualValue, min);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsGreaterThanOrEqualTo")]
		public bool Guard_IsGreaterThanOrEqualTo_Expr(ulong value, ulong min, string messageText)
		{
			try
			{
				// Act
				Guard.IsGreaterThanOrEqualTo(() => value, min);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsGreaterThanOrEqualTo")]
		public bool Guard_IsGreaterThanOrEqualTo_Value(ulong actualValue, ulong min, string messageText)
		{
			try
			{
				// Act
				ulong value = min;
				Guard.IsGreaterThanOrEqualTo(() => value, actualValue, min);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsLessThan")]
		public bool Guard_IsLessThan_Expr(ulong value, ulong max, string messageText)
		{
			try
			{
				// Act
				Guard.IsLessThan(() => value, max);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsLessThan")]
		public bool Guard_IsLessThan_Value(ulong actualValue, ulong max, string messageText)
		{
			try
			{
				// Act
				ulong value = max;
				Guard.IsLessThan(() => value, actualValue, max);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsLessThanOrEqualTo")]
		public bool Guard_IsLessThanOrEqualTo_Expr(ulong value, ulong max, string messageText)
		{
			try
			{
				// Act
				Guard.IsLessThanOrEqualTo(() => value, max);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}

		[TestCaseSource(typeof(GuardUInt64TestsSource), "IsLessThanOrEqualTo")]
		public bool Guard_IsLessThanOrEqualTo_Value(ulong actualValue, ulong max, string messageText)
		{
			try
			{
				// Act
				ulong value = max;
				Guard.IsLessThanOrEqualTo(() => value, actualValue, max);

				return true;
			}
			catch (ArgumentOutOfRangeException ex)
			{
                Assert.IsNotNull(messageText);
                Assert.IsNotEmpty(messageText);
				ex.Message.ShouldStartWith(messageText);
				return false;
			}
			catch (Exception ex)
			{
				// Assert
				Assert.Fail(ex.Message);
				return false;
			}
		}
    }
}
